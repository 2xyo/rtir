# Initial data for a fresh RTIR Installation.

@Queues = (
    {
        Name              => 'Incidents',
        CorrespondAddress => "",
        CommentAddress    => "",
	InitialPriority   => 50,
    },
    {
        Name              => 'Incident Reports',
        CorrespondAddress => "",
        CommentAddress    => "",
    },
    {
        Name              => 'Investigations',
        CorrespondAddress => "",
        CommentAddress    => "",
    },
    {
        Name              => 'Blocks',
        CorrespondAddress => "",
        CommentAddress    => "",
    },
);

@CustomFields = (
    {
        Name        => '_RTIR_State',
        Type        => 'SelectSingle',
        Queue       => 'Incidents',
	Disabled    => 2,
        Values      => [
            {
                Name      => "open",
                SortOrder => 1
            },
            {
                Name      => "resolved",
                SortOrder => 2
            },
            {
                Name      => "abandoned",
                SortOrder => 3
            }
        ],
    },
    {
        Name        => '_RTIR_Constituency',
        Type        => 'SelectSingle',
        Queue       => 'Incidents',
	Disabled    => 2,
        Values      => [
            {
                Name      => "EDUNET",
                SortOrder => 1
            },
            {
                Name      => "GOVNET",
                SortOrder => 2
            }
        ],
    },
    {
        Name        => '_RTIR_State',
        Type        => 'SelectSingle',
        Queue       => 'Incident Reports',
	Disabled    => 2,
        Values      => [
            {
                Name      => "new",
                SortOrder => 1
            },
            {
                Name      => "open",
                SortOrder => 2
            },
            {
                Name      => "resolved",
                SortOrder => 3
            },
            {
                Name      => "rejected",
                SortOrder => 4
            }
        ],
    },
    {
        Name        => '_RTIR_State',
        Type        => 'SelectSingle',
        Queue       => 'Investigations',
	Disabled    => 2,
        Values      => [
            {
                Name      => "open",
                SortOrder => 1
            },
            {
                Name      => "resolved",
                SortOrder => 2
            },
        ],
    },
    {
        Name        => '_RTIR_State',
        Type        => 'SelectSingle',
        Queue       => 'Blocks',
	Disabled    => 2,
        Values      => [
            {
                Name      => "pending activation",
                SortOrder => 1
            },
            {
                Name      => "active",
                SortOrder => 2
            },
            {
                Name      => "pending removal",
                SortOrder => 3
            },
            {
                Name      => "removed",
                SortOrder => 4
            }
        ],
    },
    {
        Name        => '_RTIR_Description',
        Type        => 'FreeformMultiple',
	Disabled    => 2,
        Queue       => 'Incidents',
    },
    {
        Name        => '_RTIR_SLA',
        Type        => 'SelectSingle',
        Queue       => 'Incident Reports',
	Disabled    => 2,
        Values      => [
            {   Name => 'Full service',
                SortOrder => 1,
	    },
            {   Name => 'Reduced service',
                SortOrder => 2,
	    },
        ],
    },
    {
        Name        => '_RTIR_Function',
        Type        => 'SelectSingle',
        Queue       => 'Incidents',
	Disabled    => 2,
        Values      => [
            {
                Name      => "AbuseDesk",
                SortOrder => 1
            },
            {
                Name      => "IncidentCoord",
                SortOrder => 2
            }
        ],
    },
    {
        Name        => '_RTIR_Classification',
        Type        => 'SelectSingle',
        Queue       => 'Incidents',
	Disabled    => 2,
        Values      => [
            {
                Name      => "Spam",
                SortOrder => 1
            },
            {
                Name      => "System Compromise",
                SortOrder => 2
            },
            {
                Name      => "Query",
                SortOrder => 3
            },
            {
                Name      => "Scan",
                SortOrder => 4
            },
            {
                Name      => "Denial of Service",
                SortOrder => 5
            },
            {
                Name      => "Piracy",
                SortOrder => 6
            }
        ],
    },
    {
        Name        => '_RTIR_HowReported',
        Type        => 'SelectSingle',
        Queue       => 'Incident Reports',
	Disabled    => 2,
        Values => [
            {
                Name      => "Email",
                SortOrder => 1
            },
            {
                Name      => "Telephone",
                SortOrder => 2
            },
            {
                Name      => "Other",
                SortOrder => 3
            },
        ]
    },
    {
        Name        => '_RTIR_ReporterType',
        Type        => 'SelectSingle',
        Queue       => 'Incident Reports',
	Disabled    => 2,
        Values      => [
            { Name => "JANET customer",      SortOrder => 1 },
            { Name => "external individual", SortOrder => 2 },
            {
                Name      => "other ISP",
                SortOrder => 3
            },
            {
                Name      => "police",
                SortOrder => 4
            },
            {
                Name      => "other IRT",
                SortOrder => 5
            },
            { Name => "other" => SortOrder => 6 },
        ]
    },
    {
        Name        => '_RTIR_IP',
        Type        => 'FreeformSingle',
        Queue       => 'Blocks',
	Disabled    => 2,
    },
    {
        Name        => '_RTIR_Netmask',
        Type        => 'FreeformSingle',
        Queue       => 'Blocks',
	Disabled    => 2,
    },
    {
        Name        => '_RTIR_Port',
        Type        => 'FreeformSingle',
        Queue       => 'Blocks',
	Disabled    => 2,
    },
    {
        Name        => '_RTIR_WhereBlocked',
        Type        => 'FreeformSingle',
        Queue       => 'Blocks',
	Disabled    => 2,
    },
);

@Scrips = (
    {  Description    => 'NotifyOnLaunch',
       Queue          => 'Investigations',
       ScripCondition => 'On Create',
       ScripAction    => 'Notify Requestors',
       Template       => 'LaunchMessage' },
    {  Description    => 'NotifyOnCreate',
       Queue          => 'Blocks',
       ScripCondition => 'On Create',
       ScripAction    => 'Notify Requestors',
       Template       => 'NewMessage' },
    {  Description => "DetectUserResponse",
       Queue          => 'Incident Reports',
       ScripCondition => 'On Correspond',
       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
if ($self->TicketObj->Owner ne $self->TransactionObj->Creator) {
  my $date = RT::Date->new($RT::SystemUser);
  $date->SetToNow;
  $self->TicketObj->SetDue($date->ISO);
}
  return 1;
# ------------------------------------------------------------------- #
	],
       CustomPrepareCode => '1',
       Template       => 'Blank' },
    {  Description => "DetectUserResponse",
       Queue            => 'Investigations',
       ScripCondition => 'On Correspond',
       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
if ($self->TicketObj->Owner ne $self->TransactionObj->Creator) {
  my $date = RT::Date->new($RT::SystemUser);
  $date->SetToNow;
  $self->TicketObj->SetDue($date->ISO);
}
  return 1;
# ------------------------------------------------------------------- #
	],
       CustomPrepareCode => '1',
       Template       => 'Blank' },
    {  Description => "DetectUserResponse",
       Queue            => 'Blocks',
       ScripCondition => 'On Correspond',
       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
if ($self->TicketObj->Owner ne $self->TransactionObj->Creator) {
  my $date = RT::Date->new($RT::SystemUser);
  $date->SetToNow;
  $self->TicketObj->SetDue($date->ISO);
}
  return 1;
# ------------------------------------------------------------------- #
	],
       CustomPrepareCode => '1',
       Template       => 'Blank' },
    {  Description => "SetStartsDate",
       Queue            => 'Incidents',
       ScripCondition => 'On Create',
       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
if ($self->TicketObj->StartsObj->AsString eq "Not set") {
  my $date = RT::Date->new($RT::SystemUser);
  $date->SetToNow;
  $self->TicketObj->SetStarts($date->ISO);
}
  return 1;
# ------------------------------------------------------------------- #	],
       CustomPrepareCode => '1',
       Template       => 'Blank' },
    {  Description => "SetDates",
       Queue            => 'Incident Reports',
       ScripCondition => 'On Create',
       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
my $sla = 'Full service';
if ($self->TicketObj->FirstCustomFieldValue('_RTIR_SLA')) {
  $sla = $self->TicketObj->FirstCustomFieldValue('_RTIR_SLA');
} else {
  $sla = 'Full service';
}
my $addminutes = $RT::SLA->{$sla};
if ($self->TicketObj->StartsObj->AsString eq "Not set") {
  my $date = RT::Date->new($RT::SystemUser);
  $date->SetToNow;
  $self->TicketObj->SetStarts($date->ISO);
  $date->AddSeconds($addminutes * 60);
  $self->TicketObj->SetDue($date->ISO);
}
my $CustomFields = $self->TicketObj->QueueObj->CustomFields();
$CustomFields->{'find_disabled_rows'} = 1;
while (my $CustomField = $CustomFields->Next()) {
  if ($CustomField->Name eq '_RTIR_SLA') {
    $self->TicketObj->AddCustomFieldValue(Field => $CustomField->id, Value => $sla);
    last;
  }
}
  return 1;
# ------------------------------------------------------------------- #	],
       CustomPrepareCode => '1',
       Template       => 'Blank' },
    {  Description => "SetDates",
       Queue            => 'Investigations',
       ScripCondition => 'On Create',
       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
my $date = RT::Date->new($RT::SystemUser);
$date->SetToNow;
if ($self->TicketObj->StartsObj->AsString eq "Not set") {
  $self->TicketObj->SetStarts($date->ISO);
}
if ($self->TicketObj->DueObj->AsString eq "Not set") {
  $date->AddDays($RT::overdueafter);
  $self->TicketObj->SetDue($date->ISO);
}
  return 1;
# ------------------------------------------------------------------- #	],
       CustomPrepareCode => '1',
       Template       => 'Blank' },
    {  Description => "SetDates",
       Queue            => 'Blocks',
       ScripCondition => 'On Create',
       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
my $date = RT::Date->new($RT::SystemUser);
$date->SetToNow;
if ($self->TicketObj->StartsObj->AsString eq "Not set") {
  $self->TicketObj->SetStarts($date->ISO);
}
if ($self->TicketObj->DueObj->AsString eq "Not set") {
  $date->AddDays($RT::overdueafter);
  $self->TicketObj->SetDue($date->ISO);
}
  return 1;
# ------------------------------------------------------------------- #	],
       CustomPrepareCode => '1',
       Template       => 'Blank' },
    {  Description => "UnsetDue",
       Queue            => 'Incident Reports',
       ScripCondition => 'On Status Change',
       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
my $date = RT::Date->new($RT::SystemUser);
if ($self->TransactionObj->NewValue eq 'rejected' ||
    $self->TransactionObj->NewValue eq 'resolved') {
  $date->Set(Format => 'unix', Value=> 0);
  $self->TicketObj->SetDue($date->ISO);
} elsif ( ( $self->TransactionObj->OldValue eq 'rejected' ||
            $self->TransactionObj->OldValue eq 'resolved') &&
           $self->TransactionObj->NewValue eq 'open') {
  $date->SetToNow;
  $self->TicketObj->SetDue($date->ISO);
}
  return 1;
# ------------------------------------------------------------------- #	],
       CustomPrepareCode => '1',
       Template       => 'Blank' },
    {  Description => "UnsetDue",
       Queue            => 'Investigations',
       ScripCondition => 'On Status Change',
       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
my $date = RT::Date->new($RT::SystemUser);
if ($self->TransactionObj->NewValue eq 'rejected' ||
    $self->TransactionObj->NewValue eq 'resolved') {
  $date->Set(Format => 'unix', Value=> 0);
  $self->TicketObj->SetDue($date->ISO);
} elsif ( ( $self->TransactionObj->OldValue eq 'rejected' ||
            $self->TransactionObj->OldValue eq 'resolved') &&
           $self->TransactionObj->NewValue eq 'open') {
  $date->SetToNow;
  $self->TicketObj->SetDue($date->ISO);
}

return 1;
# ------------------------------------------------------------------- #	],
       CustomPrepareCode => '1',
       Template       => 'Blank' },
    {  Description => "UnsetDue",
       Queue            => 'Blocks',
       ScripCondition => 'On Status Change',
       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
my $date = RT::Date->new($RT::SystemUser);
if ($self->TransactionObj->NewValue eq 'open' ||
    $self->TransactionObj->NewValue eq 'rejected' ||
    $self->TransactionObj->NewValue eq 'resolved') {
  $date->Set(Format => 'unix', Value=> 0);
  $self->TicketObj->SetDue($date->ISO);
} elsif ($self->TransactionObj->NewValue eq 'stalled') {
  $date->SetToNow;
  $date->AddDays($RT::overdueafter);
  $self->TicketObj->SetDue($date->ISO);
}
  return 1;
# ------------------------------------------------------------------- #	],
       CustomPrepareCode => '1',
       Template       => 'Blank' },
    {  Description => "SetHowReported",
       Queue            => 'Incident Reports',
       ScripCondition => 'On Create',
       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
my $CustomFields = $self->TicketObj->QueueObj->CustomFields();
$CustomFields->{'find_disabled_rows'} = 1;
while (my $CustomField = $CustomFields->Next()) {
  if ($CustomField->Name eq '_RTIR_HowReported') {
    my $Values = $self->TicketObj->CustomFieldValues($CustomField->id);
    if (!$Values->Next) {
      $self->TicketObj->AddCustomFieldValue(Field => $CustomField->id, Value => "Email");
    }
  }
}
  return 1;
# ------------------------------------------------------------------- #
	],
       CustomPrepareCode => '1',
       Template       => 'Blank' },
    {  Description => "SetRTIRState",
       Queue            => 'Blocks',
       ScripCondition   => 'User Defined',
       CustomIsApplicableCode => q[
# ------------------------------------------------------------------- #
  if ($self->TransactionObj->Type eq "Status" or
     ($self->TransactionObj->Type eq "Set" and 
      $self->TransactionObj->Field eq "Status") or
    $self->TransactionObj->Type eq "Create" or
    $self->TransactionObj->Type eq "CustomField") {
    return 1;
  } else {
    return 0;
  }
# ------------------------------------------------------------------- #
	],

       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
my $CustomFields = $self->TicketObj->QueueObj->CustomFields();
$CustomFields->{'find_disabled_rows'} = 1;
while (my $CustomField = $CustomFields->Next()) {
  if ($CustomField->Name eq '_RTIR_State') {
    my $State;
    if ($self->TicketObj->Status eq 'new') {
      $State = 'pending activation';
    } elsif ($self->TicketObj->Status eq 'open') {
      $State = 'active';
    } elsif ($self->TicketObj->Status eq 'stalled') {
      $State = 'pending removal';
    } elsif ($self->TicketObj->Status eq 'resolved') {
      $State = 'removed';
    } else {
      return 0;
    }
    $self->TicketObj->AddCustomFieldValue(Field => $CustomField->id, Value => $State);
  }
}
  return 1;
# ------------------------------------------------------------------- #
	],
       CustomPrepareCode => '1',
       Template          => 'Blank', },
    {  Description => "SetRTIRState",
       Queue            => 'Incident Reports',
       ScripCondition   => 'User Defined',
       CustomIsApplicableCode => q[
# ------------------------------------------------------------------- #
  if ($self->TransactionObj->Type eq "Status" or
    $self->TransactionObj->Type eq "Create" or
    ($self->TransactionObj->Type eq "AddLink" and 
     $self->TransactionObj->Field eq "MemberOf") or
    ($self->TransactionObj->Type eq "Set" and 
     $self->TransactionObj->Field eq "Status") or
    $self->TransactionObj->Type eq "CustomField") {
    return 1;
  } else {
    return 0;
  }
# ------------------------------------------------------------------- #
	],

       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
my $CustomFields = $self->TicketObj->QueueObj->CustomFields();
$CustomFields->{'find_disabled_rows'} = 1;
while (my $CustomField = $CustomFields->Next()) {
  if ($CustomField->Name eq '_RTIR_State') {
    my $State;
    if ($self->TicketObj->Status eq 'new' or $self->TicketObj->Status eq 'open' or $self->TicketObj->Status eq 'stalled') {
      $State = 'new';
      while (my $link = $self->TicketObj->MemberOf->Next) {
        my $member = $link->TargetObj;
        if ($member->QueueObj->Name eq 'Incidents') {
	  $State = 'open';
        }
      }
    } elsif ($self->TicketObj->Status eq 'resolved') {
      $State = 'resolved';
    } elsif ($self->TicketObj->Status eq 'rejected') {
      $State = 'rejected';
    } else {
      return 0;
    }
    $self->TicketObj->AddCustomFieldValue(Field => $CustomField->id, Value => $State);
  }
}
  return 1;
# ------------------------------------------------------------------- #
	],
       CustomPrepareCode => '1',
       Template          => 'Blank', },

    {  Description => "SetRTIRState",
       Queue            => 'Investigations',
       ScripCondition   => 'User Defined',
       CustomIsApplicableCode => q[
# ------------------------------------------------------------------- #
  if ($self->TransactionObj->Type eq "Status" or
     ($self->TransactionObj->Type eq "Set" and 
      $self->TransactionObj->Field eq "Status") or
    $self->TransactionObj->Type eq "Create" or
    $self->TransactionObj->Type eq "CustomField") {
    return 1;
  } else {
    return 0;
  }
# ------------------------------------------------------------------- #
	],

       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
my $CustomFields = $self->TicketObj->QueueObj->CustomFields();
$CustomFields->{'find_disabled_rows'} = 1;
while (my $CustomField = $CustomFields->Next()) {
  if ($CustomField->Name eq '_RTIR_State') {
    my $State;
    if ($self->TicketObj->Status eq 'open' or $self->TicketObj->Status eq 'new') {
      $State = 'open';
    } elsif ($self->TicketObj->Status eq 'resolved') {
      $State = 'resolved';
    } else {
      return 0;
    }
    $self->TicketObj->AddCustomFieldValue(Field => $CustomField->id, Value => $State);
  }
}
  return 1;
# ------------------------------------------------------------------- #
	],
       CustomPrepareCode => '1',
       Template          => 'Blank', },

    {  Description => "SetRTIRState",
       Queue            => 'Incidents',
       ScripCondition   => 'User Defined',
       CustomIsApplicableCode => q[
# ------------------------------------------------------------------- #
  if ($self->TransactionObj->Type eq "Status" or
      ($self->TransactionObj->Type eq "Set" and 
       $self->TransactionObj->Field eq "Status") or
      $self->TransactionObj->Type eq "Create" or
      $self->TransactionObj->Type eq "CustomField") {
    return 1;
  } else {
    return 0;
  }
# ------------------------------------------------------------------- #
	],

       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
my $CustomFields = $self->TicketObj->QueueObj->CustomFields();
$CustomFields->{'find_disabled_rows'} = 1;
while (my $CustomField = $CustomFields->Next()) {
  if ($CustomField->Name eq '_RTIR_State') {
    my $State;
    if ($self->TicketObj->Status eq 'new' ||
        $self->TicketObj->Status eq 'open' ||
	$self->TicketObj->Status eq 'stalled') {
      $State = 'open';
    } elsif ($self->TicketObj->Status eq 'resolved') {
      $State = 'resolved';
    } elsif ($self->TicketObj->Status eq 'rejected') {
      $State = 'abandoned';
    } else {
      return 0;
    }
    $self->TicketObj->AddCustomFieldValue(Field => $CustomField->id, Value => $State);
  }
}
  return 1;
# ------------------------------------------------------------------- #
	],
       CustomPrepareCode => '1',
       Template          => 'Blank', },
    {  Description => "ResolveAllChildren",
       Queue            => 'Incidents',
       ScripCondition   => 'On Status Change',
       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
if ($self->TicketObj->NewValue eq 'resolved' or 
    $self->TicketObj->NewValue eq 'rejected') {
  my $members = $self->TicketObj->Members;
  while (my $link = $members->Next) {
    my $member= $link->BaseObj;
    if ($member->QueueObj->Name eq 'Blocks' or
        $member->QueueObj->Name eq 'Investigations' or
        $member->QueueObj->Name eq 'Incident Reports') {
      $member->Resolve();
    }
  }
}
# ------------------------------------------------------------------- #
	],
       CustomPrepareCode => '1',
       Template          => 'Blank', },
    {  Description => "FixOwnership",
       Queue            => 'Incidents',
       ScripCondition   => 'On Owner Change',
       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
{
  # change owner of child Incident Reports, Investigations, Blocks
  while (my $link = $self->TicketObj->Members->Next) {
    my $member= $link->BaseObj;
    if ( ($member->QueueObj->Name eq 'Incident Reports' ||
          $member->QueueObj->Name eq 'Investigations' ||
          $member->QueueObj->Name eq 'Blocks' ) &&
          $member->OwnerObj->id != $self->TransactionObj->NewValue) {
      my ($res, $msg); 
      my $user = new RT::CurrentUser($self->TransactionObj->CurrentUser);
      $user->Load("root");
      my $t = new RT::Ticket($user);
      $t->Load($member->id);
      if ($self->TransactionObj->NewValue == $self->TransactionObj->Creator) {
        if ($self->TransactionObj->CurrentUser->id == $RT::Nobody->id) {
          ($res, $msg) = $t->Take();
        } else {
          ($res, $msg) = $t->Steal();
	}
      } else {
          ($res, $msg) = $t->SetOwner($self->TransactionObj->NewValue);
      }
      $RT::Logger->debug("FixOwnership Scrip: ".$msg)
    }
  }
  return 1;
}
# ------------------------------------------------------------------- #
	],
       CustomPrepareCode => '1',
       Template          => 'Blank', },
    {  Description => "FixOwnership",
       Queue            => 'Incident Reports',
       ScripCondition   => 'On Owner Change',
       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
{
  # change owner of parent Incident(s)
  while (my $link = $self->TicketObj->MemberOf->Next) {
    my $incident= $link->TargetObj;
    if ( $incident->QueueObj->Name eq 'Incidents' &&
         $incident->OwnerObj->id != $self->TransactionObj->NewValue) {
      my ($res, $msg); 
      my $user = new RT::CurrentUser($self->TransactionObj->CurrentUser);
      $user->Load("root");
      my $t = new RT::Ticket($user);
      $t->Load($incident->id);
      if ($self->TransactionObj->NewValue == $self->TransactionObj->Creator) {
          ($res, $msg) = $t->Steal();
      } else {
          ($res, $msg) = $t->SetOwner($self->TransactionObj->NewValue);
      }
      $RT::Logger->debug("FixOwnership Scrip: ".$msg)
    }
  }
  return 1;
}
# ------------------------------------------------------------------- #
	],
       CustomPrepareCode => '1',
       Template          => 'Blank', },
    {  Description => "FixOwnership",
       Queue            => 'Investigations',
       ScripCondition   => 'On Owner Change',
       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
{
  # change owner of parent Incident(s)
  while (my $link = $self->TicketObj->MemberOf->Next) {
    my $incident= $link->TargetObj;
    if ( $incident->QueueObj->Name eq 'Incidents' &&
         $incident->OwnerObj->id != $self->TransactionObj->NewValue) {
      my ($res, $msg); 
      my $user = new RT::CurrentUser($self->TransactionObj->CurrentUser);
      $user->Load("root");
      my $t = new RT::Ticket($user);
      $t->Load($incident->id);
      if ($self->TransactionObj->NewValue == $self->TransactionObj->Creator) {
          ($res, $msg) = $t->Steal();
      } else {
          ($res, $msg) = $t->SetOwner($self->TransactionObj->NewValue);
      }
      $RT::Logger->debug("FixOwnership Scrip: ".$msg)
    }
  }
  return 1;
}
# ------------------------------------------------------------------- #
	],
       CustomPrepareCode => '1',
       Template          => 'Blank', },
    {  Description => "FixOwnership",
       Queue            => 'Blocks',
       ScripCondition   => 'On Owner Change',
       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
{
  # change owner of parent Incident(s)
  while (my $link = $self->TicketObj->MemberOf->Next) {
    my $incident= $link->TargetObj;
    if ( $incident->QueueObj->Name eq 'Incidents' &&
         $incident->OwnerObj->id != $self->TransactionObj->NewValue) {
      my ($res, $msg); 
      my $user = new RT::CurrentUser($self->TransactionObj->CurrentUser);
      $user->Load("root");
      my $t = new RT::Ticket($user);
      $t->Load($incident->id);
      if ($self->TransactionObj->NewValue == $self->TransactionObj->Creator) {
          ($res, $msg) = $t->Steal();
      } else {
          ($res, $msg) = $t->SetOwner($self->TransactionObj->NewValue);
      }
      $RT::Logger->debug("FixOwnership Scrip: ".$msg)
    }
  }
  return 1;
}
# ------------------------------------------------------------------- #
	],
       CustomPrepareCode => '1',
       Template          => 'Blank', },
    {  Description => "ReopenIncident",
       Queue            => 'Incident Reports',
       ScripCondition   => 'On Status Change',
       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
# If if the child becomes not-closed, make sure the Incident is re-opened
if ($self->TransactionObj->NewValue ne 'rejected' &&
    $self->TransactionObj->NewValue ne 'resolved') {
  my $parents = $self->TicketObj->MemberOf;
  while (my $link = $parents->Next) {
    my $member = $link->TargetObj;
    if ($member->QueueObj->Name eq 'Incidents') {
      if ($member->Status eq 'rejected' ||
          $member->Status eq 'resolved') {
        $member->Open();
      }
    }
  }
}
return 1;
# ------------------------------------------------------------------- #
	],
       CustomPrepareCode => '1',
       Template          => 'Blank', },
    {  Description => "ReopenIncident",
       Queue            => 'Investigations',
       ScripCondition   => 'On Status Change',
       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
# If if the child becomes not-closed, make sure the Incident is re-opened
if ($self->TransactionObj->NewValue ne 'rejected' &&
    $self->TransactionObj->NewValue ne 'resolved') {
  my $parents = $self->TicketObj->MemberOf;
  while (my $link = $parents->Next) {
    my $member = $link->TargetObj;
    if ($member->QueueObj->Name eq 'Incidents') {
      if ($member->Status eq 'rejected' ||
          $member->Status eq 'resolved') {
        $member->Open();
      }
    }
  }
}
return 1;
# ------------------------------------------------------------------- #
	],
       CustomPrepareCode => '1',
       Template          => 'Blank', },
    {  Description => "ReopenIncident",
       Queue            => 'Blocks',
       ScripCondition   => 'On Status Change',
       ScripAction      => 'User Defined',
       CustomCommitCode => q[
# ------------------------------------------------------------------- #
# If if the child becomes not-closed, make sure the Incident is re-opened
if ($self->TransactionObj->NewValue ne 'rejected' &&
    $self->TransactionObj->NewValue ne 'resolved') {
  my $parents = $self->TicketObj->MemberOf;
  while (my $link = $parents->Next) {
    my $member = $link->TargetObj;
    if ($member->QueueObj->Name eq 'Incidents') {
      if ($member->Status eq 'rejected' ||
          $member->Status eq 'resolved') {
        $member->Open();
      }
    }
  }
}
return 1;
# ------------------------------------------------------------------- #
	],
       CustomPrepareCode => '1',
       Template          => 'Blank', },
);

@Templates = (
    { Queue       => 'Blocks',
      Name        => 'NewMessage',
      Description => 'Sent when a block is created',
      Content     => 'Subject: {$Ticket->Subject}

{$Transaction->Content()}

{
  my $output = "";
  my $CustomFields = $Ticket->QueueObj->CustomFields();
  $CustomFields->{"find_disabled_rows"} = 1;
  while (my $CustomField = $CustomFields->Next()) {
    my @mailfields = ("_RTIR_IP", 
        "_RTIR_Netmask", 
        "_RTIR_Port",
        "_RTIR_WhereBlocked");
    my $Values = $Ticket->CustomFieldValues($CustomField->Id);
    while (my $Value = $Values->Next()) {
      for my $field (@mailfields) {
	 if ($CustomField->Name eq $field) {
          $output .= $CustomField->Name.": ".$Value->Content."\n";
        }
      }
    }
  }
  return $output;
}
-------------------------------------------------------------------------
Please include the string:

         [{$rtname} #{$Ticket->id}]

in the subject line of all future correspondence about this issue. To do so, 
you may reply to this message.

                        Thank you,
                        {$Ticket->QueueObj->CorrespondAddress()}', },
    { Queue       => 'Investigations',
      Name        => 'LaunchMessage',
      Description => 'Sent when an investigation is launched',
      Content     => 'Subject: {$Ticket->Subject}

{$Transaction->Content()}

-------------------------------------------------------------------------
Please include the string:

         [{$rtname} #{$Ticket->id}]

in the subject line of all future correspondence about this issue. To do so, 
you may reply to this message.

                        Thank you,
                        {$Ticket->QueueObj->CorrespondAddress()}', },
);

@Groups = (
    { Name        => 'DutyTeam',
      Type        => 'Privileged',
      Domain      => 'UserDefined',
      Instance    => '',
      Description => 'Duty Team Members',    # loc
    },
);

@ACL = (
    { GroupDomain => 'RT::Queue-Role',
      GroupType => Owner,
      Queue => 'Incidents',
      Right  => 'ModifyTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Incidents',
      Right  => 'CreateTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Incidents',
      Right  => 'OwnTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Incidents',
      Right  => 'SeeQueue', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Incidents',
      Right  => 'ShowTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Incidents',
      Right  => 'ShowTicketComments', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Incidents',
      Right  => 'StealTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Incidents',
      Right  => 'TakeTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Incidents',
      Right  => 'Watch', },
    { GroupDomain => 'RT::Queue-Role',
      GroupType => Owner,
      Queue => 'Incident Reports',
      Right  => 'ModifyTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Incident Reports',
      Right  => 'CreateTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Incident Reports',
      Right  => 'OwnTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Incident Reports',
      Right  => 'SeeQueue', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Incident Reports',
      Right  => 'ShowTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Incident Reports',
      Right  => 'ShowTicketComments', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Incident Reports',
      Right  => 'StealTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Incident Reports',
      Right  => 'TakeTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Incident Reports',
      Right  => 'Watch', },
    { GroupType => 'Everyone', 
      GroupDomain => 'SystemInternal',
      Queue => 'Incident Reports',
      Right  => 'CreateTicket', },
    { GroupType => 'Everyone', 
      GroupDomain => 'SystemInternal',
      Queue => 'Incident Reports',
      Right  => 'ReplyToTicket', },
    { GroupDomain => 'RT::Queue-Role',
      GroupType => Owner,
      Queue => 'Investigations',
      Right  => 'ModifyTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Investigations',
      Right  => 'CreateTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Investigations',
      Right  => 'OwnTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Investigations',
      Right  => 'SeeQueue', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Investigations',
      Right  => 'ShowTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Investigations',
      Right  => 'ShowTicketComments', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Investigations',
      Right  => 'StealTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Investigations',
      Right  => 'TakeTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Investigations',
      Right  => 'Watch', },
    { GroupType => 'Everyone', 
      GroupDomain => 'SystemInternal',
      Queue => 'Investigations',
      Right  => 'ReplyToTicket', },
    { GroupDomain => 'RT::Queue-Role',
      GroupType => Owner,
      Queue => 'Blocks',
      Right  => 'ModifyTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Blocks',
      Right  => 'CreateTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Blocks',
      Right  => 'OwnTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Blocks',
      Right  => 'SeeQueue', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Blocks',
      Right  => 'ShowTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Blocks',
      Right  => 'ShowTicketComments', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Blocks',
      Right  => 'StealTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Blocks',
      Right  => 'TakeTicket', },
    { GroupId => 'DutyTeam',      # - principalId
      GroupDomain => 'UserDefined',
      Queue => 'Blocks',
      Right  => 'Watch', },
    { GroupType => 'Everyone', 
      GroupDomain => 'SystemInternal',
      Queue => 'Blocks',
      Right  => 'ReplyToTicket', },
);
