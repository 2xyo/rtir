#!/usr/bin/perl
use warnings;
use strict;

### after: use lib qw(@RT_LIB_PATH@);
use lib qw(/opt/rt3/local/lib /opt/rt3/lib);

use RT;
RT::LoadConfig;
RT::Init;

my %opt;

sub debug(@) {
    return unless $opt{'verbose'};
    print @_;
    print "\n" if $_[-1] && $_[-1] !~ /\n$/s;
};

use Getopt::Long;
GetOptions( \%opt, "name=s", "correspond=s", "comment=s", "help", "verbose" );

if ( $opt{'help'} ) {
    require Pod::Usage;
    import Pod::Usage;
    pod2usage("RTIR Constituencies management tool\n");
    exit 1;
}

my $constituency = $opt{'name'};
# cleanup value
$constituency = '' unless defined $constituency;
$constituency =~ s/^\s+//;
$constituency =~ s/\s+$//;
$constituency =~ s/\s+/ /gs;
unless ( defined $constituency && length $constituency ) {
    print STDERR "Name of constituency is a mandatory argument\n";
    exit 1;
}


$RT::Handle->BeginTransaction;

debug "Adding constituency $constituency";

my @queue_prefixes = ('Incidents', 'Incident Reports', 'Investigations', 'Blocks');

my %metaqueues;
my %mainqueues;
# Create our four new queues
foreach my $prefix (@queue_prefixes) {
    $mainqueues{$prefix} = create_or_load_queue($prefix); # will always load
    $metaqueues{$prefix} = create_or_load_queue($prefix . " - " .$constituency);
}

# Create a DutyTeam $constituency
my $dutyteam = create_or_load_group('DutyTeam '.$constituency);
my $ro = create_or_load_group('ReadOnly '.$constituency);

my @DUTYTEAM_METAQUEUE_RIGHTS = (

       'OwnTicket', 
       'CommentOnTicket', 
       'ShowTicket', 
       'ShowTicketComments', 
       'StealTicket', 
       'TakeTicket', 
       'Watch', 
); 

my @DUTYTEAM_PRIMARY_QUEUE_RIGHTS = (
       'CreateTicket', 
       'SeeQueue', 
       'ShowTemplate', 
);


my @RO_METAQUEUE_RIGHTS = (
       'ShowTicket', 
       'ShowTicketComments', 
       'Watch', 
);
 

my @RO_PRIMARY_QUEUE_RIGHTS = (
       'SeeQueue', 
       'ShowTemplate', 

);
   
    
my @DUTYTEAM_CF_RIGHTS = ( 'SeeCustomField', 'ModifyCustomField');
my @RO_CF_RIGHTS = ( 'SeeCustomField');

# Grant that new dutyteam rights to see and update the CFs
    grant_group_cf_rights($dutyteam, @DUTYTEAM_CF_RIGHTS);
# Grant that new dutyteam rights to do queue-level things on the "main" RTIR queues
    grant_group_queue_rights($dutyteam, \%mainqueues, @DUTYTEAM_PRIMARY_QUEUE_RIGHTS);
# Grant that new dutyteam all the regular dutyteam rights for the new constituency queues
    grant_group_queue_rights($dutyteam, \%metaqueues, @DUTYTEAM_METAQUEUE_RIGHTS);




# Create or load the group "ReadOnly $constituency"
    grant_group_cf_rights($ro, @RO_CF_RIGHTS);
# Grant the new readonly group the rights to see the RTIR CFs
    grant_group_queue_rights($ro, \%mainqueues, @RO_PRIMARY_QUEUE_RIGHTS);
# Grant the new readonly group the rights to see the "main" RTIR queues
    grant_group_queue_rights($ro, \%metaqueues, @RO_METAQUEUE_RIGHTS);


$RT::Handle->Commit;

debug "Done. Enjoy your new constituency.\n"; 

sub get_cf {
    my $cf = RT::CustomField->new( $RT::SystemUser );
    $cf->Load( "_RTIR_Constituency" );
    unless ( $cf->id ) {
        die "Could load the cosntituency custom field";
    }
    return $cf;
}

sub add_cf_value {
    my $value = shift;

    debug "Adding the value to the constituency CF";

    my $cf = get_cf();
    my $values = $cf->Values;
    $values->Limit( FIELD => 'Name', VALUE => $value );
    my $value_obj = $values->First;
    if ( $value_obj && $value_obj->id ) {
        debug "Value '$value' already exists";
    } else {
        my ($val,$msg) = $cf->AddValue( Name => $value );
        die $msg unless $val;
        debug "Added '$value' to the constituency field";
    }
}

sub grant_group_queue_rights {
    my $group = shift;
    my $queues = shift;
    my @rights = (@_);
    
    foreach my $queue    (values %$queues) {
        debug "Granting rights for queue " .$queue->Name. " to group ". $group->Name;
        foreach my $right  (@rights) {
            my ($val,$msg) =  $group->PrincipalObj->GrantRight(Right => $right, Object=>$queue);
            debug "\t$right\n";
            unless ($val) {
                die "Failed to grant $right to ".$group->name. " for Queue ". $queue->Name;
            }
        }
    } 
}


sub grant_group_cf_rights {
    my $group = shift;
    my @rights = (@_);

    my $cfs = RT::CustomFields->new($RT::SystemUser);
    $cfs->Limit( FIELD => 'Name', OPERATOR => 'STARTSWITH', VALUE => '_RTIR' );
    while ( my $cf = $cfs->Next ) {
        debug "Granting rights for custom field ". $cf->Name . " to group ". $group->Name;

        foreach my $right  (@rights) {
            my ($val,$msg) =  $group->PrincipalObj->GrantRight(Right => $right, Object=>$cf);
            print "\t$right\n";
            unless ($val) {
                die "Failed to grant $right to ".$group->Name. " for Custom Field ". $cf->Name
                    .".\nError: $msg";
            }
        }
    } 
}

sub create_or_load_group {
    my $name = shift;
    my $group = RT::Group->new($RT::SystemUser);
    $group->LoadUserDefinedGroup($name);
    unless ( $group->id ) {
        my ($val,$msg) = $group->CreateUserDefinedGroup( Name => $name);
        debug "Creating new group $name: $msg";
    } else {
        debug "Group '$name' already exists";
    }

    die "Failed to create group $name." unless $group->id;

    return $group;
}

sub create_or_load_queue {
    my $name = shift;
    my $queue = RT::Queue->new( $RT::SystemUser );
    $queue->LoadByCols( Name => $name );
    unless ( $queue->id ) {
        my ($val, $msg) = $queue->Create(
            Name => $name,
            CommentAddress => $opt{'comment'},
            CorrespondAddress => $opt{'correspond'},
        );
        debug "Creating new queue '$name': $msg";
        debug "\tcomment address:\t$opt{'comment'}" if $opt{'comment'};
        debug "\tcorrespond address:\t$opt{'correspond'}" if $opt{'correspond'};
    } else {
        debug "Queue '$name' already exists";

        # TODO: update addresses
    }

    die "Failed to create queue $name." unless $queue->id;

    return $queue;
}


