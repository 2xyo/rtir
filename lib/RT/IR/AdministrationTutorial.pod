=head1 RTIR Administrative Tutorial

=head2 Blocks Queue

You may disable the Blocks by putting the following into your RTIR config:

    Set($RTIR_DisableBlocksQueue, 1);

=head2 Custom Fields

=over 4

=item _RTIR_State

The various states an incident, IR, investigation, or block can be in, such as
'open', 'stalled', 'abandoned', etc.

=item _RTIR_Constituency

The constituency of an incident, IR, investigation, or block

=item _RTIR_Description

Short description of an Incident

=item _RTIR_Resolution

How an Incident was or wasn't resolved

=item _RTIR_SLA

The SLA of an IR

=item _RTIR_Function

Who is handling the Incident

=item _RTIR_Classification

The type of Incident, such as system comproise or denial of service

=item _RTIR_HowReported

How the IR got into RTIR

=item _RTIR_ReporterType

Who reported the IR, such as the police or another ISP

=item _RTIR_IP

IP addresses related to the incident, IR, investigation, or block

L<Tutorial/'IP'>

=item _RTIR_Netmask

Network mask for a Block

=item _RTIR_Port

Port for a Block

=item _RTIR_WhereBlocked

Where the block is placed

=item _RTIR_Customer

Customer for an IR or Investigation

=back

=head2 Scrips

=over 4

=item DetectUserResponse

=item DetectStaffResponse

=item SetStartsDate

=item SetStarts

=item SetStartsDateOnQueueChange

=item SetStarted

=item SetDue

=item SetDueOnQueueChange

=item UnsetDue

=item SetDueReopen

=item SetHowReported

=item SetRTIRState

=item ResolveAllChildren

=item FixOwnership

=item ReopenIncident

=item SetDefaultIncidentResolution

=item NotifyOnClose

=item SetIPFromContent

=item SetConstituency

=item SetConstituencyGroup

=back

=head2 Templates

=over 4

=item Autoreply in Blocks queue

This template is sent when a block is created.

=item BlockRemoved in Blocks queue

This template is sent when a block is removed.

=item Autoreply in Investigations queue

This template is sent when a new investigation is launched.

=back

=head2 GnuPG Encryption

Documented in RT L<RT::Crypt::GnuPG>
GnuPG integration is now a feature of RT.  Configuration
can be done in your RT_SiteConfig.pm.

=head2 Locking

See the documentation for L<RT::Extension::TicketLocking>

=head2 Aging

See the documentation for L<RT::Extension::TicketAging>

=head2 Maintaining DB size, deleting entries, restoring deleted data

During normal operation RT/RTIR never deletes data from the database.
Since RT 3.7 the RTx::Shredder extension has been integrated into
RT.  This extension can remove data such as Users or Tickets
from the RT/RTIR system. You can find documentation for this 
extension in in L<RT::Shredder>  by running `perldoc lib/RT/Shredder.pm`
RT::Shredder's documentation includes information on restoring deleted data
from backups. RT::Shredder provides SQL commands to reverse any delete
operations, so any data that it deletes may be restored.

