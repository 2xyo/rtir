=head1 RTIR Administrative Tutorial

=head2 Blocks Queue

You may disable the Blocks by putting the following into your RTIR config:

    Set($RTIR_DisableBlocksQueue, 1);

=head2 Custom Fields

=over 4

=item State

The various states an incident, IR, investigation, or block can be in, such as
'open', 'stalled', 'abandoned', etc.

=item Constituency

The constituency of an incident, IR, investigation, or block

=item Description

Short description of an Incident

=item Resolution

How an Incident was or wasn't resolved

=item SLA

The SLA of an IR

=item Function

Who is handling the Incident

=item Classification

The type of Incident, such as system comproise or denial of service

=item HowReported

How the IR got into RTIR

=item ReporterType

Who reported the IR, such as the police or another ISP

=item IP

IP addresses related to the incident, IR, investigation, or block

L<Tutorial/'IP'>

=item Netmask

Network mask for a Block

=item Port

Port for a Block

=item WhereBlocked

Where the block is placed

=item Customer

Customer for an IR or Investigation

=back

=head2 Managing "RT at Glance" and "RTIR home" pages

In the config you can set @RTIR_HomepageComponents option to control
allowed portlets people can add to thier workspace. RT has its own
option $HomepageComponents so you can list different sets for RT and
RTIR. Read more about different portlets in L<Tutorial>.

=head2 Notifications

Almost all email notifications in RT/RTIR are constrolled via scrips.

There are three default base actions you can use to notify users:

=over 4

=item Notify

Sends a notification to users, reply-to field will be set
according to correspond address. As well, NotifyActor option
influence set of recipients.

=item Notify As Comment

Similar to 'Notify', but reply-to field is set according to
comment address.

=item Autoreply

Is a variation of 'Notify' action which sends email even if NotifyActor
option is disabled.

=back

Above actions have multiple variants with different list of recipients,
for example 'Notify Owner' or 'Notify Requestors'. List of recipients
may contain the following values: 'Requestors', 'Owner', 'Ccs', 'AdminCcs'
and 'Other Recipients'. 'Other Recipients' is the only special case,
these are users who are listed as one-time recipients on ticket's
reply/comment pages. All other entries are watchers of a ticket.
The list can be combination of values like 'Owner, Ccs, AdminCcs'.

Here is several examples:

    On Correspond Notify Requestors and Ccs with template Correspondence
    On Create Autoreply To Requestors with template Autoreply
    On Owner Change Notify Owner with template Transaction

Text of notifications is controlled using templates where queue's template
can override global one. For example you can create template 'Correspondence'
in a queue and all notifications (global or queue specific) will be using
this template instead of global.

=head2 Scrips

=over 4

=item DetectUserResponse

Applies to the Incident Reports, Blocks and Investigations queues.
Sets the Due date based on the SLA_Response_* settings
if the user sending Correspondence is not a staff member (Duty Team group).

=item DetectStaffResponse

Applies to the Incident Reports, Blocks and Investigations queues.
Sets the Due date based on the Queue's Default Due or the global OverdueAfter
configuration using your SLA configuration if the user sending Correspondence 
is a staff member (Duty Team group).

=item SetStartsDate

Applies to the Incidents Queue.
On Ticket creation, set the Starts date to now.

=item SetStarts

Applies to the Incident Reports, Blocks and Investigations queues.
On Ticket creation, set the Starts date to the next instant during Business Hours.

=item SetStartsDateOnQueueChange

In the Incidents Queue, set the Starts date to now when the Queue changes.
In the Incident Reports, Blocks and Investigations queues, set the Starts
date to the next instant during Business Hours on a Queue change.

=item SetStarted

In the Block queue: When a Block with Status = 'Active' is created or
is switched from Pending Activation to Active, set the Started date to now.

In the Incident Reports queue: When a Ticket is created that links to a
Ticket in the Incidents queue or an existing IR is linked to an Incident,
set the Started date to now.

=item SetDue

In the Incident Reports queue, Due is set based on the SLA Custom Field 
during Ticket creation.  SLA is set if needed, based on your Business Hours
definitions.

In the Investigations and Blocks queues, Due is set to the first instant during
Business Hours for your Default Due setting, during Ticket creation.

=item SetDueOnQueueChange

In the Incident Reports queue, Due is set based on the SLA Custom Field 
during Queue Change.  SLA is set if needed, based on your Business Hours
definitions.

In the Investigations and Blocks queues, Due is set to the first instant during
Business Hours for your Default Due setting, during Ticket creation.

=item UnsetDue

Applies to the Incident Reports, Blocks and Investigations queues.
When the Status of a Ticket changes from an Active Status to an Inactive
Status (see F<RT_Config.pm>) the Due date is unset.

=item SetDueReopen

Applies to the Incident Reports, Blocks and Investigations queues.
When the Status of a Ticket changes from an Inactive Status to an Active
Status (see F<RT_Config.pm>) the Due date is set based on your SLA_Reopen
Config settings.

=item SetHowReported

Applies to the Incident Reports queue.
On Ticket creation, set the HowReported Custom Field to a default
value of Email if it wasn't otherwise specified.

=item SetRTIRState

Applies to the Incident Reports, Blocks, Incidents and Investigations queues.
Sets the State Custom Field based on the current Status
of the Ticket.  This is triggered on Create, Custom Field change, Status Change,
Linking of tickets or Queue Change.  Correspondence in the Blocks queue also
triggers this.

Applies to the Incident Reports, Blocks and Investigations queues.
If Links between tickets are added or removed, or the Due date is changed,
the parent Incident ticket has its Due date updated to reflect the Due
date of the "most due" child ticket.

=item ResolveAllChildren

Applies to the IncidentsQueue.
If the Status of an Incident is changes to an Inactive Status,
looks for linked Tickets in the Incident Report, Investigation or Blocks
Queues and Resolves them.  If any of these linked Tickets are linked
to other ongoing Incidents, a comment is left and they are left unresolved.

=item FixOwnership

Applies to the Incidents Queue.
When the Owner of an Incident is changed, the Owner of linked children
tickets are changed to the same owner.

Applies to the Incident Reports, Blocks and Investigations queues.
When the Owner of a Ticket in these Queues is changed, that change
is also applied to the linked Incident

=item ReopenIncident

Applies to the Incident Reports, Blocks and Investigations queues.
If the status of a Ticket in these Queues is changed from rejected or
resolved, the linked parent Incident ticket is marked as Open.

=item SetDefaultIncidentResolution

Applies to the Incident Queue.
When an Incident's Status is changed, if it is changed from an
Inactive Status to an Active Status, the Resolution Custom Field
is removed.  If it is changed from an Active Status to an Inactive Status
and the Resolution Custom Field wasn't set manually, it is set
to the value of _RTIR_Resolution_(rejected|resolved)_default in your
F<RTIR_Config.pm>.

=item NotifyOnClose

Applies to the Blocks Queue.
When a Block Ticket is moved from an Active Status to an Inactive
Status (closed), the Requestors on the Block are notified using the
L<Templates/BlockRemoved in Blocks queue> Template

=item SetIPFromContent

Applies to the Incident Reports, Blocks, Incidents and Investigations queues.
Updates the Ticket Custom Field IP to have a list of all IP and IP Ranges
found in the body of the ticket during Create and Correspond

=item SetConstituency

Applies to the Incident Reports, Blocks, Incidents and Investigations queues.
Uses the Constituency algorithms discussed in L<RT::IR::Constituencies> to 
set and propagate changes to the Constituency Custom Field.  On Ticket
creation, Constituency is set based on the checking the parent Ticket, the 
X-RT-Mail-Extension header (see L<RT::IR::Constituencies>) or the default set 
in your F<RTIR_Config.pm>

When linking tickets or changing the Constituency Custom Field, this
Scrip ensures that the change is propagated based on your choice of 
_RTIR_Constituency_Propagation in your F<RTIR_Config.pm>

=item SetConstituencyGroup

Applies to the Incident Reports, Blocks, Incidents and Investigations queues.
When Tickets are Created, or the Constituency Custom Field is updated,
this Scrip manages the assignment of DutyTeam groups as AdminCcs.
It makes sure that for a Constituency EDUNET, a DutyTeam group
named 'DutyTeam EDUNET' is assigned as AdminCc and removes other DutyTeam
groups from the AdminCc.  L<RT::IR::Constituencies/ACLs> discusses
how to use these groups.

=back

=head2 Templates

=over 4

=item Autoreply in Blocks queue

This template is sent when a block is created.

=item BlockRemoved in Blocks queue

This template is sent when a block is removed.

=item Autoreply in Investigations queue

This template is sent when a new investigation is launched.

=back

=head2 Locking

See the documentation for L<RT::Extension::TicketLocking>

=head2 Aging

See the documentation for L<RT::Extension::TicketAging>

=head2 Maintaining DB size, deleting entries, restoring deleted data

During normal operation RT/RTIR never deletes data from the database.
Since RT 3.7 the RTx::Shredder extension has been integrated into
RT.  This extension can remove data such as Users or Tickets
from the RT/RTIR system. You can find documentation for this 
extension in in L<RT::Shredder>  by running `perldoc lib/RT/Shredder.pm`
RT::Shredder's documentation includes information on restoring deleted data
from backups. RT::Shredder provides SQL commands to reverse any delete
operations, so any data that it deletes may be restored.

=head2 GnuPG support

GnuPG integration is now a feature of RT.  Configuration
can be done in your RT_SiteConfig.pm.
See also the documentation in L<RT::Crypt::GnuPG>.

=head3 Reverification

RTIR supports reverification of incoming email. If a user sends signed mail
but RTIR doesn't have his public key (or if some other error occurs), then his
message will be still be processed, but there will be "This message is
unverified" warnings in the UI. Afterwards, RTIR will automatically attempt to
reverify that message whenever someone views it.

=head3 Key selection

Sometimes a user will have multiple public keys in RTIR's GPG database. When
that happens, RTIR has the user writing the message decide which key to use
when sending that user encrypted mail. They are listed as fingerprints along
with their trust levels. If only one key is valid, then RTIR will
automatically choose it instead of asking the user.

If a user has no trusted keys, then the web interface will warn and refuse to
send him an encrypted message. This is ultimately due to limitations in GnuPG:
we cannot encrypt a message with an untrusted key.  Managing the trust levels
of keys must be done outside of RT as there is not currently key management 
support available.

=head3 Missing passphrase

If RTIR is asked to sign an outgoing message and the passphrase is unavailable,
it will detect this and avoid sending any email. The user will be asked to
notify a system administrator.

A missing passphrase occurs when GPG Agent is unresponsive or the passphrase
was mis-set in RTIR_SiteConfig.pm. Note that you can use either GPG Agent or
set the passphrase in the site config, you need not do both.
