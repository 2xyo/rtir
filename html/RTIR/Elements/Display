%# BEGIN LICENSE BLOCK
%# 
%# Copyright (c) 1996-2002 Jesse Vincent <jesse@bestpractical.com>
%# 
%# (Except where explictly superceded by other copyright notices)
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# 
%# Unless otherwise specified, all modifications, corrections or
%# extensions to this work which alter its source code become the
%# property of Best Practical Solutions, LLC when submitted for
%# inclusion in the work.
%# 
%# 
%# END LICENSE BLOCK
<& /Elements/ListActions, actions => \@Actions &>

<table border=0 cellpadding=0 cellspacing=2 width=100%>
<tr>
<td valign=top colspan=2>
<& /Elements/TitleBoxStart, title => loc("The Basics"), 
	title_class=> 'inverse' &>

<& '/RTIR/'.$Type.'/Elements/ShowBasics', Ticket => $Ticket &>

<& /Ticket/Elements/ShowCustomFields, Ticket => $Ticket &>

<& /Elements/TitleBoxEnd &>

</td>
</tr>
<tr>
        <TD VALIGN=TOP width=50%>
        <BR>
	  <& /Elements/TitleBoxStart, title => loc('People'), 
		title_class=> 'inverse' &>
	  <& /RTIR/Incident/Elements/ShowPeople, Ticket => $Ticket &>
	  <& /Elements/TitleBoxEnd &>
	<BR>
	</TD>
<td>
        <BR>
	  <& /Elements/TitleBoxStart, title => loc("Dates"),
		title_class=> 'inverse',  
		 color => "#663366" &>
	  <& /RTIR/Incident/Elements/ShowDates, Ticket => $Ticket &>
	  <& /Elements/TitleBoxEnd &>
	<BR>  
	  <& /Ticket/Elements/ShowAttachments, Ticket => $Ticket &>

	  <& /Ticket/Elements/ShowRequestor, Ticket => $Ticket &>


	</TD>
      </TR>
</table>
<& /RTIR/Elements/ShowHistory , 
      Ticket => $Ticket, 
      Collapsed => $ARGS{'Collapsed'}, 
      ShowHeaders => $ARGS{'ShowHeaders'} &> 

<%INIT>
my ($message, $Ticket, @Actions);

$Ticket = new RT::Ticket($session{'CurrentUser'});

if ($id ne 'new') {
  $Type = $m->scomp("/RTIR/Elements/Type", Ticket => $id);
  $Type =~ s/\s*$//;
}

my $QueueObj = new RT::Queue($session{'CurrentUser'});
my ($QueueName, $Title);
if ($Type eq "Investigation") {
  $QueueName = "Investigations";
} elsif ($Type eq "Block") {
  $QueueName = "Blocks";
} else {
  $QueueName = "Incident Reports";
}
$QueueObj->Load($QueueName) || Abort(loc("Queue could not be loaded."));

unless ($id) {
    Abort('No incident specified');
}

if ($ARGS{'id'} eq 'new') {
    # {{{ Create a new ticket
    
    unless ($QueueObj->CurrentUserHasRight('CreateTicket')) {
	Abort('You have no permission to create tickets in that queue.');
    }
    ($Ticket, @Actions) =
       CreateTicket(Attachments => $session{'Attachments'}, %ARGS);
    delete $session{'Attachments'};
    unless ($Ticket->CurrentUserHasRight('ShowTicket')) {
      Abort("No permission to view newly created ticket #".$Ticket->id.".");
    }
    # }}}
}

else { 
    $Ticket = LoadTicket($ARGS{'id'});
    unless ($Ticket->CurrentUserHasRight('ShowTicket')) {
	Abort("No permission to view ticket");
    }


    $ARGS{'UpdateContent'} =~ s/\r\n/\n/g;
    chomp ($ARGS{'UpdateContent'}) ;

    my @UpdateActions;
    if ($ARGS{'UpdateContent'} &&
        $ARGS{'UpdateContent'} ne '' &&
        $ARGS{'UpdateContent'} ne  "-- \n" .
                                $session{'CurrentUser'}->UserObj->Signature
       ) {
            $ARGS{UpdateAttachments} = $session{'Attachments'};
	    ProcessUpdateMessage(ARGSRef=>\%ARGS, 
				 Actions=>\@UpdateActions, 
				 TicketObj=>$Ticket);
            delete $session{'Attachments'};
	}

if (defined $ARGS{'Action'}) {
  if ($ARGS{'Action'} =~ /^(Steal|Kill|Take|SetTold)$/) {
    my $action = $1;
    my ($res, $msg)=$Ticket->$action();
    push(@Actions, $msg);
  } elsif ($ARGS{'Action'} eq 'Respond' && @UpdateActions) {
    my $date = RT::Date->new($RT::SystemUser);
    $date->SetToNow;
    $date->AddDays($RT::overdueafter);
    $ARGS{'Due_Date'} = $date->ISO;
  }
}

#Process basics updates
my @BasicActions = ProcessTicketBasics(ARGSRef => \%ARGS, TicketObj=>$Ticket);
my @LinkActions = ProcessTicketLinks( TicketObj => $Ticket, ARGSRef => \%ARGS);
my @DateActions = ProcessTicketDates( TicketObj => $Ticket, ARGSRef => \%ARGS);

push (@Actions, @UpdateActions, @BasicActions, @LinkActions, @DateActions);
}

</%INIT>

<%ARGS>
$Basics => undef
$Type => undef
$id => undef
$Create => undef
$ShowHeaders => undef
$Collapsed => undef
</%ARGS>
