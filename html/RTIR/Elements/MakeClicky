<%ARGS>
$url_params => undef
$content => undef
$ticket => undef
</%ARGS>
<%ONCE>
use Regexp::Common qw(URI net);
use URI::URL;

my $web_path = RT->Config->Get('WebPath');
my $url_params_once;
my $incident;

my %cb = (
    default => sub {
        my ($type,$value) = @_;
        return qq{<a href="$web_path/RTIR/Tools/Lookup.html?${url_params_once}q=${value}">$value</a>};
    },
    ip => sub {
        my ($type,$value) = @_;
        my $result = qq[<a href="$web_path/RTIR/Tools/Lookup.html?@{[$url_params_once]}type=ip&q=${value}">$value</a>];
        if ($incident) {
            $result .= qq[[<a href="$web_path/RTIR/Create.html?Incident=$incident&Queue=Blocks&IP-Value=$value">Block</a>]];
        }
        return $result;
    },
    ipdecimal => sub {
        my ($type,$value) = @_;
        my $i = unpack "L",$value;
        return $value unless $value > 33554432;

        my $host = do {
            my $hostnum = sprintf "%lx", $i;
            my $a = hex( substr( $hostnum, 0, 2 ) );
            my $b = hex( substr( $hostnum, 2, 2 ) );
            my $c = hex( substr( $hostnum, 4, 2 ) );
            my $d = hex( substr( $hostnum, 6, 2 ) );
            "$a.$b.$c.$d";
        };
        my $result = qq[$value <a href="$web_path/RTIR/Tools/Lookup.html?@{[$url_params_once]}type=ip&q=$host">($host)</a>];
        if ($incident) {
            $result .= qq[[<a href="$web_path/RTIR/Create.html?Incident=$incident&Queue=Blocks&IP-Value=$host">Block</a>]];
        }
        return $result;
    },
    email => sub {
        my ($type,$value) = @_;
        my ($pre,$post) = split /@/,$value,2;
        my $result = qq[<a href="$web_path/RTIR/Tools/Lookup.html?@{[$url_params_once]}type=email&q=$value">$value</a>];
        if ( $incident ) {
            if ( $r->uri =~ /Lookup.html$/ ) {
                $result .= qq[<input type="checkbox" name="Requestorbox-$value" unchecked />];
            }
            $result .= qq[[<a href="$web_path/RTIR/Create.html?Incident=$incident&Queue=Investigations&Requestors=$value">Investigate to</a>]];
        }
        return $result .qq[<a href="$web_path/RTIR/Tools/Lookup.html?@{[$url_params_once]}type=host&q=$post">($post)</a>];
    },
    url => sub {
        my ($type,$value) = @_;
        my $uri  = URI::URL->new($value);
        my $host = $uri->host;
        return qq[<a target="new" href="$value">$value</a>]
            .qq[<a href="$web_path/RTIR/Tools/Lookup.html?@{[$url_params_once]}type=host&q=$host">($host)</a>];
    },
    noc => sub {
        my ($type,$value) = @_;
        return qq[<a href="$web_path/RTIR/Tools/Lookup.html?@{[$url_params_once]}type=handle&q=$value">$value</a>];
    },
    host => sub {
        my ($type,$value) = @_;
        return qq[<a href="$web_path/RTIR/Tools/Lookup.html?@{[$url_params_once]}type=host&q=$value">$value</a>];
    },
);

# key -> [ regexp, callback, _recache ]
my %types = (
    A_httpurl   => [ $RE{URI}{HTTP}{-keep}{-scheme => 'https?'},   $cb{url}],
    B_ip        => [ q[\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}],        $cb{ip} ],
    C_ipdecimal => [ q[\d{8,13}(?!=)],                             $cb{ipdecimal} ],
    D_email     => [ q[(?:mailto:)?[\w\.\+-]+\@[\w\.-]+\.\w{2,3}], $cb{email}],
    F_domain    => [ q[(?:[\w-]+\.)+[A-Za-z]{2,3}],                $cb{host} ],
    G_RIPE      => [ q[(?-i:[A-Z][A-Z0-9-]+)],                     $cb{noc} ],
);
my @types = sort keys %types;

foreach ( values %types ) {
    $_->[2] = '^' . $_->[0] . '$';
    $_->[1] ||= $cb{default};
}

my $regexp = join "|",
             map '\b'. $types{$_}->[0] .'\b',
             @types;

my $handle = sub {
    my $what = $_[0];
    for my $rec( @types{ @types } ) {
        return $rec->[1]->( $type, $what ) if $what =~ $rec->[2];
    }
}

</%ONCE>
<%INIT>
$url_params_once=$ARGS{url_params};

$incident = undef;
if ( $ticket && $ticket->QueueObj->Name eq 'Incidents' ) {
    $incident = $ticket->Id;
}

if ( $url_params_once && $url_params_once !~ /&$/ ) {
    $url_params_once .= "&";
}
while ( $$content =~ s/($regexp)/$handle->( $1 || '' )/gsieo ) {1}
return;

</%INIT>
<%DOC>
# Thoughts:

# 1. Regexp::Common doesn't seem to deal with URL's with user:pass in
# them very well.  Someone send Abigail up a patch.  (Note, we're now
# doing the HTTP thing first.)

# 2. We're doing a big substitution on the whole content, and then
# re-matching each little piece.  Does it make sense to make 5 passes
# over the big text

# 4. Callbacks are cool
</%DOC>
