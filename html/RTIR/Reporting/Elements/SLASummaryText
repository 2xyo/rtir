%# BEGIN LICENSE BLOCK
%# 
%# Copyright (c) 1996-2003 Jesse Vincent <jesse@bestpractical.com>
%# 
%# (Except where explictly superceded by other copyright notices)
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# 
%# Unless otherwise specified, all modifications, corrections or
%# extensions to this work which alter its source code become the
%# property of Best Practical Solutions, LLC when submitted for
%# inclusion in the work.
%# 
%# 
%# END LICENSE BLOCK
At the start of the time period
Outstanding Incident Reports;<% scalar %$outstanding %>

During the time period
Total <%$service_level%> Incident Reports created;<% $tix_count %>
Incident Reports for which SLA time was met;<% $sla_count %>
Resolved Incident Reports;<% $resolved_count%>
Unresolved Incident Reports;<% $unresolved_count%>
<%INIT>

my ($tix_count, $sla_count, $resolved_count, $unresolved_count);
$tix_count = 0;
$sla_count = 0;
$resolved_count = 0;
$unresolved_count = 0;
	
# get the number of seconds for the service level
my $sla = $RT::SLA->{$service_level} * 60;

foreach my $key ( keys %$class_tix ) {
    my $t = $class_tix->{$key};

    $tix_count++;

    # All tickets created in queue IncidentReport created after 
    # start and before end where there was outbound 
    # correspondence within the time specified by $sla.
    #
    if ($t->StartsObj->Unix > 0 && $t->StartedObj->Unix > 0) {
	# Get a Business::Hours object for the period in question
	my $bizhours = RT::IR::BusinessHours();

	my $started_time;
	if ($t->StartsObj->Unix < $t->StartedObj->Unix) {
	    $bizhours->for_timespan( Start => $t->StartsObj->Unix, 
				     End => $t->StartedObj->Unix );
	
	    $started_time = $bizhours->between( $t->StartsObj->Unix, 
						   $t->StartedObj->Unix );
	} else {
	    $started_time = 0;
	}

	if ( $started_time < $sla) {
	    $sla_count++;
	}
    }
    
    if ( $t->ResolvedObj->Unix >= $start->Unix &&
	 $t->ResolvedObj->Unix <= $end->Unix) {
	$resolved_count++;
    }
    if ( $t->ResolvedObj->Unix <= 0 ||
	 $t->ResolvedObj->Unix > $end->Unix) {
	$unresolved_count++;
    }
    
}
</%INIT>

<%ARGS>
$service_level => undef
$class_tix => undef
$outstanding => undef
$start => undef
$end => undef
</%ARGS>
