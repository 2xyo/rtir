
<%args>
 $content => undef
</%args>
<%once>
use Regexp::Common qw /URI net/;
use URI::URL;

my $left = '\b';
my $right = '\b';
#my $left = qr[[\w\b\.\,<(\[]];
#my $right = qr[[\w\b\.\,>)\]]];

my %cb =
  (
   default => sub {
     my ($type,$value) = @_;
#     $type = substr $type,1;
     return qq[<A HREF="Lookup.html?q=${value}">$value</A>];
   },
   ipdecimal =>
   sub {
     my ($type,$value) = @_;
     my $i = unpack "L",$value;
     my $host = do {
       my $hostnum = sprintf "%lx", $i;
       my $a = hex( substr( $hostnum, 0, 2 ) );
       my $b = hex( substr( $hostnum, 2, 2 ) );
       my $c = hex( substr( $hostnum, 4, 2 ) );
       my $d = hex( substr( $hostnum, 6, 2 ) );
       "$a.$b.$c.$d";
     };
     return qq[$value <A HREF="Lookup.html?type=ip&q=$host">($host)</A>];
   },
   email =>
   sub {
     my ($type,$value) = @_;
     my ($pre,$post) = split /@/,$value,2;
     return qq[<A HREF="Lookup.html?type=email&q=$value">$value</A> ].
       qq[<A HREF="Lookup.html?type=host&q=$post">($post)</A>];
   },
   url =>
   sub {
     my ($type,$value) = @_;
     my $uri  = URI::URL->new($value);
     my $host = $uri->host;
     return qq[<A TARGET=new HREF="$value">$value</A> ].
       qq[<A HREF="Lookup.html?type=host&q=$host">($host)</A>];
   },
   noc =>
   sub {
     my ($type,$value) = @_;
     return qq[<A HREF="Lookup.html?type=handle&q=$value">$value</A>];
   },
   host =>
   sub {
     my ($type,$value) = @_;
     return qq[<A HREF="Lookup.html?type=host&q=$value">$value</A>];
   },
  );

# key -> [ regexp, callback, _recache ]
my %types =
  (
   Ahttpurl	=> [ $RE{URI}{HTTP}{-keep}{'-scheme=https?'}, $cb{url}],
   Bip		=> [ q[\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}] ],
   Cipdecimal	=> [ q[\d{8,13}(?!=)], $cb{ipdecimal} ],
   Demail	=> [ q[(?:mailto:)?[\w\.\+-]+\@[\w\.-]+\.\w{2,3}], $cb{email}],
   Fdomain	=> [ q[(?:[\w-]+\.)+[a-z]{2,3}], $cb{host}  ],
   GRIPE	=> [ q[(?-i:[A-Z]+-[A-Z0-9]+)], $cb{noc} ],
  );
my @types = sort keys %types;

for my $type (@types) {
  my $d = $types{$type};
  $d->[2]  = '^' . $d->[0] . '$';
}

my $regexp =
  join "|",
  map $left.$_.$right,
  map $_->[0],
  map $types{$_},
  @types;

sub handle {
  my $what = $1;
  for my $type (@types) {
    my $d = $types{$type};
    if ($what =~ $d->[2]) {
      my $sub = $d->[1] || $cb{default};
      return $sub->($type,$what);
    }
  }
}

</%once>
<%init>

#open(my $in,"<$file") or die $!;
#local $/; 
#my $content = <$in>;
#close $in;

my $newcontent = $content; # is this necessary?
for ( $newcontent =~ s/($regexp)/&handle($1||"")/gsieo ) {1}
$m->out($newcontent);
return();
</%init>
<%doc>
# Thoughts:

# 1. Regexp::Common doesn't seem to deal with URL's with user:pass in
# them very well.  Someone send Abigail up a patch.  (Note, we're now
# doing the HTTP thing first.)

# 2. We're doing a big substitution on the whole content, and then
# re-matching each little piece.  Does it make sense to make 5 passes
# over the big text

# 4. Callbacks are cool

</%doc>
